{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Numerical Integration"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Our first topic today will be about numerical integration, which is useful in determining of course the integrals of functions. Here we will only refer to 3 different methods with increasing accuracy.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt \n",
    "\n",
    "%matplotlib inline\n",
    "%config InlineBackend.figure_format = 'retina' \n",
    "\n",
    "plt.rcParams.update({'font.size': 12,\n",
    "                     'axes.titlesize': 18,\n",
    "                     'axes.labelsize': 16,\n",
    "                     'axes.labelpad': 14,\n",
    "                     'lines.linewidth': 1,\n",
    "                     'lines.markersize': 10,\n",
    "                     'xtick.labelsize' : 16,\n",
    "                     'ytick.labelsize' : 16,\n",
    "                     'xtick.top' : True,\n",
    "                     'xtick.direction' : 'in',\n",
    "                     'ytick.right' : True,\n",
    "                     'ytick.direction' : 'in',}) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Box method"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![box](img/box.png)\n",
    "\n",
    "The simplest method for the numerical integration of a function $f(x)$ is the box method. There you approximate the function in a certain intervall $\\Delta x$ by a horizontal line at the function value of the left edge of the intervall for example.\n",
    "\n",
    "\\begin{equation}\n",
    "\\int_{a}^{b}f(x)\\approx \\sum_{i}f(x_{i})\\Delta x\n",
    "\\end{equation}\n",
    "\n",
    "So lets write a function for that:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "def f(x):\n",
    "    return(x**2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "def int_box(f,a,b,N):\n",
    "    x=np.linspace(a,b,N)\n",
    "    y=f(x)\n",
    "    return(np.sum((x[1]-x[0])*y))\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.3384008434513486"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "int_box(f,0,1,100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1153884d0>]"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 252,
       "width": 390
      },
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "acc=[]\n",
    "for N in range(10,10000,100):\n",
    "    acc.append(int_box(f,0,1,N)-1/3)\n",
    "plt.loglog(range(10,10000,100),acc)    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Trapezoid method"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![](img/trapez.png)\n",
    "\n",
    "The trapezoid method is taking the next step of function approximation in the interval $\\Delta x$. It is approximating it with a linear function."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\\begin{equation}\n",
    "\\int_{a}^{b}f(x)dx=\\sum_{i=1}^{N}\\frac{f(x_i)+f(x_{i-1})}{2}\\Delta x\n",
    "\\end{equation}\n",
    "\n",
    "which is actually the same as\n",
    "\n",
    "\\begin{equation}\n",
    "\\int_{a}^{b}f(x)dx=\\left[ \\frac{f(x_{0}+f(x_{N}))}{2} +\\sum_{i=1}^{N-1} f(x_{i})\\right ]\\Delta x\n",
    "\\end{equation}\n",
    "\n",
    "We will use the first formula for coding it, and you may try the second yourself."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "def int_trap(f,a,b,N):\n",
    "    x=np.linspace(a,b,N)\n",
    "    y=f(x)\n",
    "    return(np.sum((y[1:]+y[:-1])*(x[1]-x[0])/2))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.3384008434513486"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## value from the box method\n",
    "int_box(f,0,1,100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.33335033840084355"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## value from the tapez method\n",
    "int_trap(f,0,1,100)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The trapez method therefore seems to give a better accuracy than the box method for the same number of steps."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Simpson method"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The Simpson method now continues with approximating the function now with a collection of parabolas. \n",
    "\n",
    "\\begin{equation}\n",
    "\\int_{a}^{b}f(x)dx \\approx \\sum_{i=1}^{\\frac{N-1}{2}}\\int_{x_{2i-1}}^{x_{2i+1}}g_{i}(x)dx\n",
    "\\end{equation}\n",
    "\n",
    "where the function $g_i(x)$ is a parabola\n",
    "\n",
    "\\begin{equation}\n",
    "g_{i}(x)=[A]x^2+[B]x+[C]\n",
    "\\end{equation}\n",
    "\n",
    "where the $[A],[B],[C]$ depends only on the function values at the edges of the slice."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![Simpson](img/simpson.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After some extensive algebra, which we do not want to do in detail, we arrive at \n",
    "\n",
    "\\begin{equation}\n",
    "\\int_{a}^{b}f(x)dx \\approx\\frac{\\Delta x}{3}\\sum_{i={\\rm odd}}^{N-1}(f(x_{i-1})+f(x_{i})+f(x_{i+1}))\n",
    "\\end{equation}\n",
    "\n",
    "as a simple formula on how to calculate the integral of a function using the Simpson method. Note that this method requires N being an odd number, which generates an even number of slices. There is a correction for odd number of slices, which we do not consider here."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [],
   "source": [
    "def int_simp(f,a,b,N):\n",
    "    x=np.linspace(a,b,N)\n",
    "    y=f(x)\n",
    "    return(np.sum((y[0:-2:2]+4*y[1:-1:2]+y[2::2])*(x[1]-x[0])/3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.33335033840084355"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## value from the tapez method\n",
    "int_trap(f,0,1,100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.3384008434513486"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## value from the box method\n",
    "int_box(f,0,1,100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.3333333333333332"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## value from the simpson method\n",
    "## take care, N needs to be odd\n",
    "int_simp(f,0,1,99)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It turns out, that the Simpson rule is indeed the best among the three methods we have considered. \n",
    "The error is the box method goes as $\\Delta x$, the one of the trapezoid method as $\\Delta x^2$, while the simpson method provides and accuracy going with $\\Delta x^4$. Thus doubling the number of integration points decreases the error by a factor of 16."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {},
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
