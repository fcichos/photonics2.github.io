{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Fourier Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "<style>\n",
       ".output_png {\n",
       "    display: table-cell;\n",
       "    text-align: center;\n",
       "    vertical-align: middle;\n",
       "}\n",
       "</style>\n"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "from scipy.integrate import odeint\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib import animation\n",
    "\n",
    "%matplotlib inline\n",
    "%config InlineBackend.figure_format = 'retina'\n",
    "\n",
    "# default values for plotting\n",
    "plt.rcParams.update({'font.size': 12,\n",
    "                     'axes.titlesize': 18,\n",
    "                     'axes.labelsize': 16,\n",
    "                     'axes.labelpad': 14,\n",
    "                     'lines.linewidth': 1,\n",
    "                     'lines.markersize': 10,\n",
    "                     'xtick.labelsize' : 16,\n",
    "                     'ytick.labelsize' : 16,\n",
    "                     'xtick.top' : True,\n",
    "                     'xtick.direction' : 'in',\n",
    "                     'ytick.right' : True,\n",
    "                     'ytick.direction' : 'in',}) \n",
    "\n",
    "# center the plots\n",
    "from IPython.core.display import HTML\n",
    "HTML(\"\"\"\n",
    "<style>\n",
    ".output_png {\n",
    "    display: table-cell;\n",
    "    text-align: center;\n",
    "    vertical-align: middle;\n",
    "}\n",
    "</style>\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Fourier analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Fourier series\n",
    "A Fourier series is a representation of periodic function $f(t)$ of period $2\\pi$ or more general as described below on an arbitrary interval $T$ regarding sine and cosine functions\n",
    "\n",
    "\\begin{equation} \\label{eq:fourier_sum}\n",
    "    f(t)=\\frac{A_{0}}{2}+\\sum_{k=1}^{\\infty}\\left ( A_{k}\\cos\\left (\\omega_k t\\right) + B_{k}\\sin\\left (\\omega_k t\\right)\\right )\n",
    "\\end{equation}\n",
    "\n",
    "where $\\omega_k=\\frac{2\\pi k}{T}$.  $T$ represents the period of the cosine and sine functions. Their amplitude is defined by the coefficients $A_k$ and $B_k$. The term $A_0$ is a constant offset added to the oscillating sine and consine functions. Equation \\ref{eq:fourier_sum} therefore represents an arbitrary periodic function $f(t)$ on an interval T as a sum of oscillating sine and cosine functions of discrete frequencies ($\\omega_k$)\n",
    " \n",
    "\\begin{equation*}\n",
    "    \\omega_k= 0, \\frac{2\\pi}{T}, \\frac{4\\pi}{T}, \\frac{6\\pi}{T}, ... , \\frac{n\\pi}{T}\n",
    "\\end{equation*}\n",
    "\n",
    "and varying amplitudes. The cosine and sine functions in the sum (Eq.  \\ref{eq:fourier_sum}) can be shown to be orthogonal by using the trigonometric identity \n",
    "\n",
    "\\begin{equation}\n",
    "\t\\sin(\\omega_{i} t)\\sin(\\omega_{k}t )=\\frac{1}{2}\\lbrace\\cos((\\omega_{i}-\\omega_{k})t)- \\cos((\\omega_{i}+\\omega_{k})t\\rbrace\n",
    "\\end{equation}\n",
    "\n",
    "Therefore the integral \n",
    "\n",
    "\\begin{equation}\n",
    "\\int\\limits_{-\\frac{T}{2}}^{+\\frac{T}{2}}  \\sin(\\omega_{i}t)\\sin (\\omega_k t) dt\t\n",
    "\\end{equation}\n",
    "\n",
    "can be split into two integrals over a cosine function with the sum $(\\omega_{1}+\\omega_{2})$ and the difference frequency $(\\omega_{1}-\\omega_{2})$. As the integration results in a sine function and has to be evaluated at $T/2$ and $-T/2$ with $\\omega_k=k 2\\pi/T$, $(k \\in \\mathbb{Z}^+ )$, the integral results in \n",
    "\n",
    "\\begin{equation}\\label{eq:orthog}\n",
    "        \\int\\limits_{-\\frac{T}{2}}^{+\\frac{T}{2}}  \\sin(\\omega_{i}t)\\sin (\\omega_k t) dt  =\\begin{cases}\n",
    "         0 &\\text{for }  i\\neq k, \\\\\n",
    "                  T &\\text{for }  i=k\n",
    "\t\\end{cases}\n",
    "\\end{equation}\n",
    "\n",
    "Equivalently, the same can be carried out for the cosine functions, which yields\n",
    "\n",
    "\\begin{equation}\n",
    "    \\int\\limits_{-\\frac{T}{2}}^{+\\frac{T}{2}}  \\cos(\\omega_{i}t)\\cos (\\omega_k t) dt  =\\begin{cases}\n",
    "         0 &\\text{for }  i\\neq k, \\\\\n",
    "         T &\\text{for }  i=k\n",
    "    \\end{cases} \n",
    "\\end{equation}\n",
    "\n",
    "As mentioned above the coefficients $A_k$ and $B_k$ are determined by the projections of the function $f(t)$ onto the basis functions as defined in section \\ref{sec:proj_function_space} and  displayed in Eq.\\ref{A_k}-\\ref{B_k}. \n",
    "\n",
    "\n",
    "\\begin{align}\\label{Projections}\n",
    "    \\int\\limits_{-\\frac{T}{2}}^{+\\frac{T}{2}} & \\cos (\\omega_k t) dt  =\\begin{cases}\n",
    "         0 &\\text{for }  k\\neq0, \\\\\n",
    "         T &\\text{for }  k=0\n",
    "    \\end{cases} \\\\\n",
    "    \\int\\limits_{-\\frac{T}{2}}^{+\\frac{T}{2}} & \\sin(\\omega_k t) dt=0  \\text{ for all }k \n",
    "\\end{align}\n",
    "\n",
    "\\begin{equation}\\label{A_k}\n",
    "    A_k=\\frac{2}{T}\\int\\limits_{-\\frac{T}{2}}^{+\\frac{T}{2}} f(t)\\cos(\\omega_k t) dt  \\text{ for } k \\neq 0\n",
    "\\end{equation}\n",
    "\n",
    "and for $k=0$\n",
    "\n",
    "\\begin{equation}\\label{A_0}\n",
    "    A_0= \\frac{1}{T}\\int\\limits_{-\\frac{T}{2}}^{+\\frac{T}{2}} f(t) dt\n",
    "\\end{equation}\n",
    "\n",
    "In this case $\\frac{2}{T}$ and $\\frac{1}{T}$ are the mean values for the Equations. To get the coefficient $B_k$ I need to multiply $f(t)$ with $\\sin (\\omega_k t)$ and integrate it from $-\\frac{T}{2}$ to $+\\frac{T}{2}$. \n",
    "\n",
    "As a result of this, we obtain \n",
    "\n",
    "\\begin{equation}\\label{B_k}\n",
    "    B_k=\\frac{2}{T}\\int\\limits_{-\\frac{T}{2}}^{+\\frac{T}{2}} f(t) \\sin(\\omega_k t) dt,\\,  \\forall k\n",
    "\\end{equation}\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Fourier transform\n",
    "\n",
    "The Fourier transform is a generalisation of the complex Fourier series to the representation of arbitrary non-periodic functions $f(t)$ by a continuous spectrum of complex functions $\\exp(i\\omega t)$. This transform is therefore also called continuous Fourier transform. The sum of individual sine and cosine functions with discrete frequencies $\\omega_{k}$ in the Fourier series is now replaced by an integral over the complex function $\\exp(i\\omega t)$ with arbitrary continuous values of the frequency $\\omega$. \n",
    "\n",
    "\n",
    "The Fourier transform of the function $f(t)$ is therefore defined by \n",
    "\n",
    "\\begin{equation}\n",
    "    F(\\omega)=\\int\\limits_{-\\infty}^{+\\infty}f(t)e^{-i\\omega t}dt\n",
    "\\end{equation}\n",
    "\n",
    "with $F(\\omega)$ now representing the spectrum of frequencies contributing to the function $f(t)$. Similarly, the so called inverse Fourier transform of the spectrum $F(\\omega)$ yields the original function $f(t)$ again (Eq. \\ref{eq:inverse_FT}). \n",
    "\n",
    "\\begin{equation}\\label{eq:inverse_FT}\n",
    "    f(t)=\\frac{1}{2\\pi}\\int\\limits_{-\\infty}^{+\\infty}F(\\omega)e^{+i\\omega t}dt\n",
    "\\end{equation}\n",
    "\n",
    "Note that the Fourier transform $F(\\omega)$ is a complex number, which gives you information on the phase and amplitude of the oscillations. Not all of the oscillations have to align in with the same phase. As compared to the last lecture, we may get the phase of the oscillation at a frequency $\\omega$ by\n",
    "\n",
    "\\begin{equation}\n",
    "\\phi=\\tan^{-1}\\left(\\frac{Im(F(\\omega))}{Re(F(\\omega))}\\right)\n",
    "\\end{equation}\n",
    "\n",
    "and the amplitude at a frequency $\\omega$ by\n",
    "\n",
    "\\begin{equation}\n",
    "x_{0}^{\\rm theo}=|F(\\omega)|\n",
    "\\end{equation}\n",
    "\n",
    "There are a number of efficient numerical algorithms available, which simplify the Fourier transformation. These are called *Fast Fourier Transforms* and implemented in *numpy* for example. We will use these algorithms to calculate the numerical Fourier transforms of our signals to identify the different oscillations in our signal. \n",
    "Below is an example how the numpy function cab be used and how to obtain the proper frequency axis.\n",
    "\n",
    "~~~\n",
    "f=np.fft.fft(alpha)\n",
    "freq = np.fft.fftfreq(t.shape[-1],time/t.shape[-1])\n",
    "~~~\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Frequency analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-05-29T11:01:55.420585Z",
     "start_time": "2018-05-29T11:01:55.415985Z"
    }
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'alpha' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-4-afa5ed6f67cf>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mylabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Amplitude'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mfontsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m16\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtick_params\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabelsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m14\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mft1\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfft\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfft\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0malpha\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m \u001b[0mfreq\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfft\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfftfreq\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtime\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfreq\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m1000\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mabs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mft1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m1000\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'alpha' is not defined"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 338,
       "width": 415
      },
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# calculate the frequency spectrum of the oscillations for different initial conditions\n",
    "plt.figure(1,figsize=(6,5))\n",
    "plt.xlabel('frequency [Hz]', fontsize=16)\n",
    "plt.ylabel('Amplitude',fontsize=16)\n",
    "plt.tick_params(labelsize=14)\n",
    "ft1=np.fft.fft(alpha)\n",
    "freq = np.fft.fftfreq(t.shape[-1],time/t.shape[-1])\n",
    "plt.plot(freq[:1000],np.abs(ft1)[:1000])\n",
    "plt.xlim(0.2,0.6)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Appendix: Fourier Analysis of a damped oscillation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Consider a generalised description of the oscillation by\n",
    "\n",
    "\\begin{equation}\n",
    "    f(t)=a(t)\\cos(\\omega_S t)\n",
    "\\end{equation}\n",
    "\n",
    "Where $a(t)$ is the time varying amplitude. This product of two functions can be treated with the help of the so-called convolution theorem. \n",
    "A convolution is represented by\n",
    "\n",
    "\\begin{equation}\\label{eq:convint}\n",
    "    f(t)*g(t)=\\int_{-\\infty}^{\\infty} f(\\tau)g(t-\\tau)d\\tau\n",
    "\\end{equation}\n",
    "\n",
    "which means, that one sums up all contributions of a function $g(t)$ centered at a time value of $\\tau$ with amplitude $f(\\tau)$. Convolutions play an important role for example in optics, where the microscope resolution function convolutes the structural images of all objects.\n",
    "\n",
    "This convolution integral can be transformed into a product of the Fourier transforms $(\\mathscr{F}$) of both functions \n",
    "\n",
    "\\begin{equation}\n",
    "    H(\\omega)G(\\omega)=\\mathscr{F}(f*g)\n",
    "\\end{equation}\n",
    "\n",
    "So the product of the Fourier transform of the individual functions in the product is the same as the Fourier transform of the convolution integral Eq. \\ref{eq:convint}.\n",
    "\n",
    "What is relevant in the discussed case of the oscillating guitar string is the inverse relation of the convolution theorem\n",
    "\n",
    "\\begin{equation}\n",
    "    H(\\omega)*G(\\omega)=\\mathscr{F}(f(t) g(t))\n",
    "\\end{equation}\n",
    "\n",
    "This means that the Fourier transform of a product of two functions is equivalent to a convolution of the Fourier transforms of the individual functions.\n",
    "\n",
    "The convolution integral of the Fourier transformed function then corresponds to\n",
    "\n",
    "\n",
    "\\begin{equation}\\label{eq:inverse_conv}\n",
    "    H(\\omega)*G(\\omega)=\\frac{1}{\\sqrt{2\\pi}}\\int_{-\\infty}^{\\infty} F(\\Omega)G(\\omega-\\Omega)d\\Omega\n",
    "\\end{equation}\n",
    "\n",
    "Using this relation and \n",
    "\n",
    "\\begin{equation}\n",
    "    H(\\omega)=\\mathscr{F}(\\cos(\\omega_S t))\n",
    "\\end{equation}\n",
    "\n",
    "and \n",
    "\n",
    "\\begin{equation}\n",
    "    G(\\omega)=\\mathscr{F}(\\Theta(t) e^{-t/\\tau})\n",
    "\\end{equation}\n",
    "\n",
    "I can compute all types of amplitude modulated harmonic oscillations in Fourier space.\n",
    "In particular, the Fourier transform $\\mathscr{F}$ of a harmonic function $\\cos(\\omega_S t)$ results in a so-called delta function ($\\delta(t)$)\n",
    "\n",
    "\\begin{equation}\\label{eq:cosineft}\n",
    "    H(\\omega)=\\mathscr{F}(\\cos(\\omega_S t))=\\sqrt{\\frac{\\pi}{2}} \\delta(\\omega+\\omega_S)-\\sqrt{\\frac{\\pi}{2}} \\delta(\\omega+\\omega_S)\n",
    "\\end{equation}\n",
    "\n",
    "The $\\delta$-function has the properties as described in section \\ref{sec:delta}.\n",
    "\n",
    "\\begin{equation}\\label{eq:lorentz}\n",
    "    G(\\omega)=\\mathscr{F}(\\Theta(t)e^{-t/\\tau})=\\frac{1}{\\sqrt{2\\pi}}\\frac{i \\tau}{(i-\\tau\\omega)}\n",
    "\\end{equation}\n",
    "\n",
    "The squared magnitude of Eq. \\ref{eq:lorentz} yields a Lorentzian lineshape  \n",
    "\n",
    "\\begin{equation}\n",
    "    |G(\\omega)|^{2}=\\frac{1}{2 \\pi} \\frac{\\tau^2}{1+\\tau^{2}\\omega^{2}}\n",
    "\\end{equation}\n",
    "\n",
    "for the frequency spectrum, which is very common in physics. This Lorentzian function has a maximum at $\\omega=0$ with $|G(\\omega)|^2=\\tau^2/2\\pi$. \n",
    "\n",
    "With the help of Eq. \\ref{eq:cosineft} and Eq. \\ref{eq:lorentz} I can write  the convolution integral \\ref{eq:inverse_conv} as \n",
    "\n",
    "\\begin{equation}\\label{Delta Functions}\n",
    "    H(\\omega)*G(\\omega)=\\frac{1}{\\sqrt{2\\pi}}\\int_{-\\infty}^{\\infty}  \\sqrt{\\frac{\\pi}{2}} [\\delta(\\Omega-\\omega_S) + \\delta(\\Omega+\\omega_S)] \\frac{1}{\\sqrt{2\\pi}}\\frac{i \\tau}{(i-\\tau (\\omega-\\Omega))} d\\Omega\n",
    "\\end{equation}\n",
    "\n",
    "The integration can be carried out using the integration rule in Eq. \\ref{delta} for the delta function which leaves me with the integral of the function displayed in Eq. \\ref{Delta Functions} as equal to \n",
    "\n",
    "\\begin{equation}\\label{Hallo}\n",
    "    F(\\omega)= H(\\omega)*G(\\omega)=\\frac{1}{\\sqrt{2\\pi}}\\cdot\\frac{\\sqrt\\pi}{\\sqrt2 \\sqrt{2\\pi}}\\left [\\frac{i\\tau}{(i-\\tau(\\omega-\\omega_S))} + \\frac{i\\tau}{(i-\\tau(\\omega+\\omega_S))}\\right ]\n",
    "\\end{equation}\n",
    "\n",
    "This yields \n",
    "\n",
    "\\begin{equation}\n",
    "F(\\omega)=\\frac{1}{\\sqrt{2\\pi}}\\frac{1/\\tau+i\\omega}{(1/\\tau+i\\omega)^2+\\omega_S^2}\n",
    "\\end{equation}\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {},
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
